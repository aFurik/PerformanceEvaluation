// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PerformanceEvaluation.Infrastructure.Data;

#nullable disable

namespace PerformanceEvaluation.Infrastructure.Migrations
{
    [DbContext(typeof(PerformanceEvaluationDbContext))]
    [Migration("20250813235308_AddWeightToCompetency")]
    partial class AddWeightToCompetency
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PerformanceEvaluation.Domain.Entities.AnonymousMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AnonymousCode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("EvaluatorEmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnonymousCode")
                        .IsUnique()
                        .HasDatabaseName("IX_AnonymousMappings_Code");

                    b.HasIndex("EvaluatorEmployeeId");

                    b.HasIndex("SessionId", "EvaluatorEmployeeId")
                        .IsUnique()
                        .HasDatabaseName("IX_AnonymousMappings_Session_Evaluator");

                    b.ToTable("AnonymousMappings", (string)null);
                });

            modelBuilder.Entity("PerformanceEvaluation.Domain.Entities.Competency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Competencies", (string)null);
                });

            modelBuilder.Entity("PerformanceEvaluation.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Department")
                        .HasDatabaseName("IX_Employees_Department");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Employees_Email");

                    b.HasIndex("Role")
                        .HasDatabaseName("IX_Employees_Role");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("PerformanceEvaluation.Domain.Entities.EvaluationResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("CompetencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("EvaluatedEmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EvaluatorEmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompetencyId");

                    b.HasIndex("EvaluatedEmployeeId");

                    b.HasIndex("EvaluatorEmployeeId");

                    b.HasIndex("SessionId", "EvaluatedEmployeeId")
                        .HasDatabaseName("IX_EvaluationResults_Session_Evaluated");

                    b.HasIndex("SessionId", "EvaluatorEmployeeId")
                        .HasDatabaseName("IX_EvaluationResults_Session_Evaluator");

                    b.HasIndex("SessionId", "EvaluatorEmployeeId", "EvaluatedEmployeeId", "CompetencyId")
                        .IsUnique()
                        .HasDatabaseName("IX_EvaluationResults_Unique_Evaluation");

                    b.ToTable("EvaluationResults", (string)null);
                });

            modelBuilder.Entity("PerformanceEvaluation.Domain.Entities.EvaluationSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("StartDate", "EndDate")
                        .HasDatabaseName("IX_EvaluationSessions_DateRange");

                    b.ToTable("EvaluationSessions", (string)null);
                });

            modelBuilder.Entity("PerformanceEvaluation.Domain.Entities.AnonymousMapping", b =>
                {
                    b.HasOne("PerformanceEvaluation.Domain.Entities.Employee", "EvaluatorEmployee")
                        .WithMany("AnonymousMappings")
                        .HasForeignKey("EvaluatorEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PerformanceEvaluation.Domain.Entities.EvaluationSession", "Session")
                        .WithMany("AnonymousMappings")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EvaluatorEmployee");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("PerformanceEvaluation.Domain.Entities.EvaluationResult", b =>
                {
                    b.HasOne("PerformanceEvaluation.Domain.Entities.Competency", "Competency")
                        .WithMany("EvaluationResults")
                        .HasForeignKey("CompetencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PerformanceEvaluation.Domain.Entities.Employee", "EvaluatedEmployee")
                        .WithMany("EvaluationsReceived")
                        .HasForeignKey("EvaluatedEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PerformanceEvaluation.Domain.Entities.Employee", "EvaluatorEmployee")
                        .WithMany("EvaluationsGiven")
                        .HasForeignKey("EvaluatorEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PerformanceEvaluation.Domain.Entities.EvaluationSession", "Session")
                        .WithMany("EvaluationResults")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competency");

                    b.Navigation("EvaluatedEmployee");

                    b.Navigation("EvaluatorEmployee");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("PerformanceEvaluation.Domain.Entities.Competency", b =>
                {
                    b.Navigation("EvaluationResults");
                });

            modelBuilder.Entity("PerformanceEvaluation.Domain.Entities.Employee", b =>
                {
                    b.Navigation("AnonymousMappings");

                    b.Navigation("EvaluationsGiven");

                    b.Navigation("EvaluationsReceived");
                });

            modelBuilder.Entity("PerformanceEvaluation.Domain.Entities.EvaluationSession", b =>
                {
                    b.Navigation("AnonymousMappings");

                    b.Navigation("EvaluationResults");
                });
#pragma warning restore 612, 618
        }
    }
}
